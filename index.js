require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const registrationUrl = process.env.REGISTRATION_AND_LOGIN;
const premiumChanel = process.env.PREMIUM_CHANEL;
const dbPath = process.env.DB_SHEETS_PATH;
const token = process.env.TOKEN;

const IMAGEPATH =
    "https://drive.google.com/u/0/drive-viewer/AKGpihZhfjXvN6O9ZdoIzOM-ZkLfMNCZx1h0yiCuYyTKDnK41iGpMlmbOXBTRwAYHnXiVt6SkkEqL5VD4y2NRQSTyrabkM_xCXZSe6Y=s1600-rw-v1";

const saveUser = async (user) => {
    try {
        const response = await fetch(dbPath, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(user),
        });

        if (!response.ok) {
            throw new Error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.statusText}`
            );
        }

        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    }
};
const validateUser = async (id) => {
    try {
        const response = await fetch("https://sheetdb.io/api/v1/9r9b3flxo3dvn", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
            },
        });
        if (!response.ok) {
            throw new Error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.statusText}`
            );
        }
        const userData = await response.json();
        if (userData.length) {
            return false;
        } else {
            return true;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        return null;
    }
};

const bot = new TelegramBot(token, {polling: true});

const CALLBACK_DATA = {
    BOT_FEATURES: "bot_features",
};

bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    const userId = msg.from.id;
    const firstName = msg.from.first_name;
    const username = msg.from.username;
    const languageCode = msg.from.language_code;

    const user = {
        userId,
        firstName,
        nickname: username,
        languageCode,
        date: new Date(Date.now()).toLocaleString("ru-RU"),
    };

    const userInBase = await validateUser(userId);
    console.log("userInBase", userInBase);
    if (!userInBase) {
        await saveUser(user);
    }

    if (text === "/start") {
        await bot.sendPhoto(chatId, IMAGEPATH, {
            caption:
                "–≠—Ç–æ—Ç –±–æ—Ç - –ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ 1win –≤ –†–æ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–∞—Ö –°–ù–ì \n" +
                "\n" +
                "–ú—ã –≤—ã–≤–µ–ª–∏ –∫–∞–∑–∏–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –≤ –ª—é–±–∏–º—ã–µ —Å–ª–æ—Ç—ã –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ üé∞\n" +
                "\n" +
                "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            reply_markup: {
                inline_keyboard: [
                    [{text: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üóÇÔ∏è", web_app: {url: registrationUrl}}],
                    [{text: "–í–æ–π—Ç–∏ üîê", web_app: {url: registrationUrl}}],
                    [
                        {
                            text: "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ü§ñ",
                            callback_data: CALLBACK_DATA.BOT_FEATURES,
                        },
                    ],
                    // [{text: '–ê–∫—Ü–∏–∏ –∏ –ë–æ–Ω—É—Å—ã ‚úàÔ∏è', web_app: {url: registrationWithBonus}}],
                    // [{text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –ü—Ä–æ–º–æ–∫–æ–¥–æ–º üöÄ', web_app: {url: registrationWithBonus}}],
                    [
                        {
                            text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1win Premium üòç",
                            url: premiumChanel,
                        },
                    ],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        });
    }
});

// Handle callback queries
bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const callbackData = query.data;

    if (callbackData === CALLBACK_DATA.BOT_FEATURES) {
        await bot.sendPhoto(chatId, IMAGEPATH, {
            caption:
                "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç ?\n" +
                "\n" +
                "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ 1win \n" +
                "ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∑–∏–Ω–æ –≤ Telegram. \n" +
                "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –ª—é–±–∏–º—ã–µ —Å–ª–æ—Ç—ã –ø—Ä—è–º–æ —Ç—É—Ç\n" +
                "‚úÖ –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞\n" +
                "‚úÖ –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º \n" +
                "\n" +
                "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ãüõ°",
            reply_markup: {
                inline_keyboard: [
                    [{text: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üóÇÔ∏è", web_app: {url: registrationUrl}}],
                    [{text: "–í–æ–π—Ç–∏ üîê", web_app: {url: registrationUrl}}],
                    [
                        {
                            text: "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ü§ñ",
                            callback_data: CALLBACK_DATA.BOT_FEATURES,
                        },
                    ],
                    [
                        {
                            text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1win Premium üòç",
                            url: premiumChanel,
                        },
                    ],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        });
    }
});
