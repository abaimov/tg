require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");

const registrationUrl = process.env.REGISTRATION_AND_LOGIN;
const premiumChanel = process.env.PREMIUM_CHANEL;
const token = process.env.TOKEN;
const fileName = process.env.FILE
const IMAGEPATH = process.env.IMGPATH

const CALLBACK_DATA = {
    BOT_FEATURES: "bot_features",
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
function checkAndCreateFile() {
    if (!fs.existsSync(fileName)) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        fs.writeFileSync(fileName, 'Total users: 0\n', 'utf8');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function loadUserData() {
    checkAndCreateFile(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    try {
        const data = fs.readFileSync(fileName, 'utf8');
        const lines = data.split('\n').filter(Boolean);

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const countLine = lines[0] || 'Total users: 0';
        const count = parseInt(countLine.split(': ')[1], 10) || 0;
        const users = lines.slice(1); // –í—Å–µ —Å—Ç—Ä–æ–∫–∏, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π

        return {users, count};
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
        return {users: [], count: 0};
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function saveUserData(users, count) {
    const data = `Total users: ${count}\n` + users.join('\n') + '\n';
    fs.writeFileSync(fileName, data, 'utf8');
}

const bot = new TelegramBot(token, {polling: true});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    const userId = msg.from.id;
    const firstName = msg.from.first_name;
    const username = msg.from.username || "–ù–∏–∫–Ω–µ–π–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
    const languageCode = msg.from.language_code;

    const user = {
        userId,
        firstName,
        nickname: username,
        languageCode,
        date: new Date(Date.now()).toLocaleString("ru-RU"),
    };

    const {users, count} = loadUserData();
    const userRecord = `${userId} | ${username} | ${user.date}`;

    if (!users.some(line => line.startsWith(String(userId)))) {
        users.push(userRecord);
        const updatedCount = count + 1;
        saveUserData(users, updatedCount);
    }

    if (text === "/start") {
        await bot.sendPhoto(chatId, IMAGEPATH, {
            caption:
                "–≠—Ç–æ—Ç –±–æ—Ç - –ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ 1win –≤ –†–æ—Å—Å–∏–∏ –∏ —Å—Ç—Ä–∞–Ω–∞—Ö –°–ù–ì \n" +
                "\n" +
                "–ú—ã –≤—ã–≤–µ–ª–∏ –∫–∞–∑–∏–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –≤ –ª—é–±–∏–º—ã–µ —Å–ª–æ—Ç—ã –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ üé∞\n" +
                "\n" +
                "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –ë–æ–Ω—É—Å + 500% –∫ –¥–µ–ø–æ–∑–∏—Ç—É –∏ 30% –∫—ç—à–±—ç–∫ –Ω–∞ –∫–∞–∑–∏–Ω–æ üí∏",
            reply_markup: {
                inline_keyboard: [
                    [{text: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üóÇÔ∏è", web_app: {url: registrationUrl}}],
                    [{text: "–í–æ–π—Ç–∏ üîê", web_app: {url: registrationUrl}}],
                    [
                        {
                            text: "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç? ü§ñ",
                            callback_data: CALLBACK_DATA.BOT_FEATURES,
                        },
                    ],
                    [
                        {
                            text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1win Premium üòç",
                            url: premiumChanel,
                        },
                    ],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        });
    }

    if (text === "/count=ebdf4515") {
        const {count} = loadUserData();
        await bot.sendMessage(chatId, `total count: ${count}`);
    }
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries
bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id;
    const callbackData = query.data;

    if (callbackData === CALLBACK_DATA.BOT_FEATURES) {
        await bot.sendPhoto(chatId, IMAGEPATH, {
            caption:
                "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç ?\n" +
                "\n" +
                "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ 1win \n" +
                "ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∑–∏–Ω–æ –≤ Telegram. \n" +
                "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –ª—é–±–∏–º—ã–µ —Å–ª–æ—Ç—ã –ø—Ä—è–º–æ —Ç—É—Ç\n" +
                "‚úÖ –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞\n" +
                "‚úÖ –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º \n" +
                "\n" +
                "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ãüõ°",
            reply_markup: {
                inline_keyboard: [
                    [{text: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üóÇÔ∏è", web_app: {url: registrationUrl}}],
                    [{text: "–í–æ–π—Ç–∏ üîê", web_app: {url: registrationUrl}}],
                    [
                        {
                            text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1win Premium üòç",
                            url: premiumChanel,
                        },
                    ],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        });
    } else if (callbackData === CALLBACK_DATA.SECRET_COMMAND) {
        const {count} = loadUserData();
        await bot.sendMessage(chatId, `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ /start: ${count}`);
    }
});
